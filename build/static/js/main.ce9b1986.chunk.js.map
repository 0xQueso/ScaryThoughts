{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","App","useState","currentAccount","setCurrentAccount","minting","setMinting","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","chainId","alert","accounts","length","account","useEffect","connectWallet","askContractToMintNft","CONTRACT_ADDRESS","provider","ethers","providers","Web3Provider","signer","getSigner","connectedContract","Contract","abi","parseInt","getMintedNft","makeAnEpicNFT","nftTxn","wait","hash","mintedSupply","getTotalSupply","totalSupply","on","from","tokenId","toNumber","className","onClick","alt","src","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4sKAAe,G,MAAA,IAA0B,0C,uBCOnCA,EAAiB,SACjBC,EAAY,8BAA0BD,GA+H7BE,EA3HH,WAEV,MAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAEMC,EAAwB,uCAAG,oCAAAC,EAAA,2DACVC,OAAbC,EADuB,EACvBA,SADuB,uBAI7BC,QAAQC,IAAI,gCAJiB,0CAOTF,EAASG,QAAQ,CAAEC,OAAQ,gBAPlB,UAOzBC,EAPyB,OAQ7BJ,QAAQC,IAAI,sBAAwBG,GAEb,cACnBA,EAXyB,wBAY3BC,MAAM,sDAZqB,4CAeNN,EAASG,QAAQ,CAACC,OAAQ,iBAfpB,QAiBN,KAFjBG,EAfuB,QAiBjBC,QACJC,EAAUF,EAAS,GACzBb,EAAkBe,IAElBR,QAAQC,IAAI,wBAGdD,QAAQC,IAAI,8BAA+BF,GAxBd,4CAAH,qDA4B9BU,qBAAU,WACRb,MACA,IAEF,IAAMc,EAAa,uCAAG,gCAAAb,EAAA,wEAECC,QAAZC,EAFW,EAEXA,WAELC,QAAQC,IAAI,iBAJI,SAOKF,EAASG,QAAQ,CAACC,OAAQ,wBAP/B,OAOZG,EAPY,OAQlBb,EAAkBa,EAAS,IART,gDAWlBN,QAAQC,IAAR,MAXkB,yDAAH,qDAebU,EAAoB,uCAAG,4CAAAd,EAAA,yDACrBe,EAAmB,6CADE,WAIJd,SAAbC,EAJiB,EAIjBA,UAJiB,wBAMjBc,EAAW,IAAIC,IAAOC,UAAUC,aAAajB,GAC7CkB,EAASJ,EAASK,YAClBC,EAAoB,IAAIL,IAAOM,SAASR,EAAkBS,IAAKJ,GAR9C,KAUvBjB,QAVuB,KAUXsB,SAVW,UAUIH,EAAkBI,eAVtB,oDAUftB,IAVe,eAUuC,QAVvC,UAYJkB,EAAkBK,gBAZd,eAYnBC,EAZmB,OAavB9B,GAAW,GACX8B,EAAOC,OACP1B,QAAQC,IAAR,kEAAuEwB,EAAOE,OAfvD,KAiBJL,SAjBI,UAiBWH,EAAkBI,eAjB7B,2BAiBnBK,GAjBmB,mBAkBLN,SAlBK,UAkBUH,EAAkBU,iBAlB5B,oBAkBnBC,GAlBmB,cAoBvBX,EAAkBY,GAAG,cAAc,SAACC,EAAMC,GACxCtC,GAAW,GACXK,QAAQC,IAAI+B,EAAMC,EAAQC,YAC1B7B,MAAM,WAAD,OAAYuB,EAAZ,cAA8BE,EAA9B,yEAA0GlB,EAA1G,YAA8HqB,EAAQC,WAAtI,SAvBgB,wBA0BvBlC,QAAQC,IAAI,UA1BW,0DA6BzBD,QAAQC,IAAR,MA7ByB,0DAAH,qDA+C1B,OACE,qBAAKkC,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,mBAAGA,UAAU,uBAAb,+BACA,mBAAGA,UAAU,WAAb,mEAnBJ,mCACsB,KAAnB3C,EACC,wBAAQ4C,QAAS1B,EAAeyB,UAAU,mCAA1C,+BAIA,wBAAQC,QAASzB,EAAsBwB,UAAU,mCAAjD,SACGzC,EAAU,aAAe,kBAiB9B,sBAAKyC,UAAU,mBAAf,UACE,qBAAKE,IAAI,eAAeF,UAAU,eAAeG,IAAKC,IACtD,mBACEJ,UAAU,cACVK,KAAMnD,EACNoD,OAAO,SACPC,IAAI,aAJN,6BAKetD,cC3HzBuD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ce9b1986.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","import './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport React, {useEffect, useState} from \"react\";\nimport {ethers} from \"ethers\";\nimport {abi} from \"./utils/abi.json\";\n\n// Constants\nconst TWITTER_HANDLE = '@queso';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = '';\nconst TOTAL_MINT_COUNT = 50;\n\nconst App = () => {\n  // Render Methods\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [minting, setMinting] = useState(false);\n\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      let chainId = await ethereum.request({ method: 'eth_chainId' });\n      console.log(\"Connected to chain \" + chainId);\n\n      const rinkebyChainId = \"0x4\";\n      if (chainId !== rinkebyChainId) {\n        alert(\"You are not connected to the Rinkeby Test Network!\");\n        return\n      }\n      const accounts = await ethereum.request({method: 'eth_accounts'});\n\n      if(accounts.length !== 0) {\n        const account = accounts[0];\n        setCurrentAccount(account);\n      } else {\n        console.log('no account connected');\n      }\n\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n  }\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  },[])\n\n  const connectWallet = async () => {\n    try{\n      const {ethereum} = window;\n      if (!ethereum) {\n        console.log('not connected');\n      }\n\n      const accounts = await ethereum.request({method: 'eth_requestAccounts'});\n      setCurrentAccount(accounts[0]);\n\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const askContractToMintNft = async () => {\n    const CONTRACT_ADDRESS = \"0xB93c94f4920f065bCC64bC88f7f180be2072Db5e\"\n\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, abi, signer);\n\n        console.log(parseInt(await connectedContract.getMintedNft()), 'here');\n\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n        setMinting(true);\n        nftTxn.wait();\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n\n        let mintedSupply = parseInt(await connectedContract.getMintedNft());\n        let totalSupply = parseInt(await connectedContract.getTotalSupply());\n\n        connectedContract.on(\"JustMinted\", (from, tokenId) => {\n          setMinting(false);\n          console.log(from, tokenId.toNumber())\n          alert(`supply: ${mintedSupply} / ${totalSupply} <br/> link to minted nft <https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}>`)\n        })\n      } else {\n        console.log(\"no eth\")\n      }\n    } catch (e) {\n      console.log(e)\n    }\n  }\n  const renderNotConnectedContainer = () => (\n      <>\n        {currentAccount === \"\" ? (\n          <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n            Connect to Wallet\n          </button>\n      ) : (\n          <button onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\">\n            {minting ? \"Minting...\" : \"Mint NFT\" }\n          </button>\n      )}\n      </>\n\n  );\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">My NFT Collection</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n          {renderNotConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}